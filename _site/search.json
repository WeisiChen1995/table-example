[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring the R gtsummary Package to Create Professional-Quality Descriptive Tables for Academic Publications",
    "section": "",
    "text": "library(NHANES)\nlibrary(gtsummary)\nlibrary(gt)\nlibrary(dplyr)\nlibrary(purrr)"
  },
  {
    "objectID": "index.html#code-available",
    "href": "index.html#code-available",
    "title": "Exploring the R gtsummary Package to Create Professional-Quality Descriptive Tables for Academic Publications",
    "section": "Code Available",
    "text": "Code Available\n\nCode to produce the example basic table\n\ndata %&gt;%\n    # Remove missing data in the Diabetes variable for simplicity\n    filter(!is.na(Diabetes)) %&gt;%\n    # Select relevant variables\n    select(Gender, Age, AgeDecade, Race1, BMI_WHO, Education, MaritalStatus, HHIncome, Work, Diabetes) %&gt;%\n    # Create a summary table by Diabetes group\n    tbl_summary(\n        by = Diabetes, \n        statistic = list(\n            all_continuous() ~ \"{mean} ({sd})\", \n            all_categorical() ~ \"{n} ({p}%)\"\n        ),\n        label = list(\n          AgeDecade = \"Age group\",\n          Race1 = \"Ethnicity\",\n          BMI_WHO = \"BMI group\",\n          HHIncome = \"Household income\",\n          Work = \"Employment status\"\n        )\n    ) %&gt;%\n    add_overall() %&gt;%\n    add_p() %&gt;%  # Test for differences between groups\n    bold_labels() %&gt;%\n    modify_header(label = \"**Characteristic**\") %&gt;%  # Update column header\n    as_gt() %&gt;%\n    gt::tab_header(\n        \"Table 1: Sociodemographic Characteristics of Patients With and Without Diabetes in the Demo Dataset\")\n\n\n\nCode to produce the customized table I\n\ndata %&gt;%\n  # Remove missing data in the Diabetes variable for simplicity\n  filter(!is.na(Diabetes)) %&gt;%\n  \n  # Format the Diabetes variable\n  mutate(\n    Diabetes = case_when(\n      Diabetes == \"Yes\" ~ \"With Diabetes\",\n      Diabetes == \"No\" ~ \"Without Diabetes\"\n    ),\n    Diabetes = factor(Diabetes, levels = c(\"With Diabetes\", \"Without Diabetes\"))\n  ) %&gt;%\n  \n  # Add total number\n  mutate(total = TRUE) %&gt;%\n  \n  # Select relevant variables\n  select(\n    total, Gender, Age, AgeDecade, Race1, BMI_WHO, Education, \n    MaritalStatus, HHIncome, Work, Diabetes\n  ) %&gt;%\n  \n  # Create a summary table by Diabetes group\n  tbl_summary(\n    by = Diabetes,\n    type = all_continuous() ~ \"continuous2\",\n    statistic = list(\n      # Include additional summary statistics for continuous variables\n      all_continuous() ~ c(\"{mean}, ({sd})\",\n                           \"{median}, ({p25}, {p75})\",\n                           \"{min}, {max}\"),\n      all_categorical() ~ \"{n} ({p}%)\"\n    ),\n    label = list(\n      total = \"Total (column denominator)\",\n      AgeDecade = \"Age group\",\n      Race1 = \"Ethnicity\",\n      BMI_WHO = \"BMI group\",\n      HHIncome = \"Household income\",\n      Work = \"Employment status\"\n    ),\n    missing = \"no\",\n    \n    # Remove decimal places for all numbers and percentages\n    digits = list(\n      all_continuous() ~ c(0, 0),\n      all_categorical() ~ c(0, 0)\n    )\n  ) %&gt;%\n  \n  # Add total column\n  add_overall() %&gt;%\n  \n  # Move the total column to the far end of the table\n  modify_table_body(\n    ~ .x %&gt;%\n      dplyr::relocate(stat_0, .after = stat_2) %&gt;%\n      \n      # Change label name\n      dplyr::mutate(\n        label = ifelse(label == \"Median, (Q1, Q3)\", \"Median, (IQR)\", label)\n      ) %&gt;%\n      dplyr::mutate(\n        label = ifelse(label == \"Min, Max\", \"Range\", label)\n      )\n  ) %&gt;%\n  \n  # Modify the header\n  modify_header(\n    update = list(\n      all_stat_cols(TRUE) ~ \"**{level}**\",\n      label = \"\",\n      stat_0 = \"**Total**\",\n      stat_1 = \"**{level}**\",\n      stat_2 = \"**{level}**\"\n    )\n  ) %&gt;%\n  \n  # Test for differences between groups\n  add_p() %&gt;%\n  \n  # Bold labels for readability\n  bold_labels() %&gt;%\n  \n  # Modify footnotes\n  modify_footnote(\n    c(all_stat_cols()) ~ NA\n  ) %&gt;%\n  \n  # Add more footnotes to specific rows\n  modify_table_styling(\n    columns = label,\n    row = label == list(\"Gender\"),\n    footnote = \"This is a sample footnote 1.\"\n  ) %&gt;%\n  modify_table_styling(\n    columns = label,\n    row = label == list(\"Age\"),\n    footnote = \"This is a sample footnote 2.\"\n  ) %&gt;%\n  \n  # Convert to gt table\n  as_gt() %&gt;%\n  \n  # Add table header with title\n  gt::tab_header(\n    title = md(\"**Table 1: Sociodemographic Characteristics of Patients With and Without Diabetes in the Demo Dataset**\")\n  ) %&gt;%\n  \n  # Prevent footnotes from being split across multiple lines\n  tab_options(footnotes.multiline = FALSE)\n\n\n\nCode to produce the customized table II\n\ntab &lt;- c(\"{n}\", \"({p}%)\") %&gt;%\n  map(\n    ~data %&gt;%\n      # Remove missing data in the Diabetes variable for simplicity\n      filter(!is.na(Diabetes)) %&gt;%\n      \n      # Format the Diabetes variable\n      mutate(\n        Diabetes = case_when(\n          Diabetes == \"Yes\" ~ \"With Diabetes\",\n          Diabetes == \"No\" ~ \"Without Diabetes\"\n        ),\n        Diabetes = factor(Diabetes, levels = c(\"With Diabetes\", \"Without Diabetes\"))\n      ) %&gt;%\n      \n      # Add total number\n      mutate(total = TRUE) %&gt;%\n      \n      # Select relevant variables\n      select(\n        total, Gender, Age, AgeDecade, Race1, BMI_WHO, Education, \n        MaritalStatus, HHIncome, Work, Diabetes\n      ) %&gt;%\n      \n      # Create a summary table by Diabetes group\n      tbl_summary(\n        by = Diabetes,\n        type = all_continuous() ~ \"continuous2\",\n        statistic = list(\n          # Include additional summary statistics for continuous variables\n          all_continuous() ~ c(\"{mean} ({sd})\",\n                               \"{median} ({p25}, {p75})\",\n                               \"{min}, {max}\"),\n          all_categorical() ~ .x\n        ),\n        label = list(\n          total = \"Total (column denominator)\",\n          AgeDecade = \"Age group\",\n          Race1 = \"Ethnicity\",\n          BMI_WHO = \"BMI group\",\n          HHIncome = \"Household income\",\n          Work = \"Employment status\"\n        ),\n        missing = \"no\",\n        \n        # Remove decimal places for all numbers and percentages\n        digits = list(\n          all_continuous() ~ c(0, 0),\n          all_categorical() ~ c(0, 0)\n        )\n      ) %&gt;%\n      \n      # Add total column\n      add_overall() %&gt;%\n      \n      # Bold labels for readability\n      bold_labels()) %&gt;%\n  tbl_merge() %&gt;%\n  modify_spanning_header(everything()~NA) %&gt;%\n  \n  # Re-arrange the number and percentage columns\n  modify_table_body(\n    ~ .x %&gt;%\n      dplyr::relocate(stat_1_2, .after=stat_1_1) %&gt;%\n      dplyr::relocate(stat_2_2, .after=stat_2_1) %&gt;%\n      dplyr::relocate(stat_0_1, .after=stat_2_2) %&gt;%\n      dplyr::relocate(stat_0_2, .after=stat_0_1)\n    %&gt;%\n      # Change label name\n      dplyr::mutate(\n        label = ifelse(label == \"Median, (Q1, Q3)\", \"Median, (IQR)\", label)\n      ) %&gt;%\n      dplyr::mutate(\n        label = ifelse(label == \"Min, Max\", \"Range\", label)\n      ) %&gt;%\n      \n      # Remove the summary statistics for the continuous variable in the % column\n      dplyr::mutate(\n        stat_0_2 = ifelse(label == \"Mean (SD)\", \"\",stat_0_2 ),\n        stat_0_2 = ifelse(label == \"Median (Q1, Q3)\", \"\",stat_0_2 ),\n        stat_0_2 = ifelse(label == \"Range\", \"\",stat_0_2 ),\n        stat_1_2 = ifelse(label == \"Mean (SD)\", \"\",stat_1_2 ),\n        stat_1_2 = ifelse(label == \"Median (Q1, Q3)\", \"\",stat_1_2 ),\n        stat_1_2 = ifelse(label == \"Range\", \"\",stat_1_2 ),\n        stat_2_2 = ifelse(label == \"Mean (SD)\", \"\",stat_2_2 ),\n        stat_2_2 = ifelse(label == \"Median (Q1, Q3)\", \"\",stat_2_2 ),\n        stat_2_2 = ifelse(label == \"Range\", \"\",stat_2_2 ),\n      )\n  ) %&gt;%\n  \n  # Modify the header\n  modify_header(\n    update = list(\n      all_stat_cols(TRUE) ~ \"**{level}**\",\n      label = \"\",\n      stat_0_1 = \"**n**\",\n      stat_0_2 = \"**col%**\",\n      stat_1_1 = \"**n**\",\n      stat_1_2 = \"**col%**\",\n      stat_2_1 = \"**n**\",\n      stat_2_2 = \"**col%**\"\n    )\n  ) %&gt;%\n  \n  # Modify spanning header\n  modify_spanning_header(\n    stat_1_1:stat_1_2 ~ \"**With Diabetes**\",\n    stat_2_1:stat_2_2 ~ \"**Without Diabetes**\",  \n    stat_0_1:stat_0_2 ~ \"**Total**\", \n  ) %&gt;%\n  \n  # Modify footnotes\n  modify_footnote(\n    c(all_stat_cols()) ~ NA\n  ) %&gt;%\n  \n  # Add more footnotes to specific rows\n  modify_table_styling(\n    columns = label,\n    row = label == list(\"Gender\"),\n    footnote = \"This is a sample footnote 1.\"\n  ) %&gt;%\n  modify_table_styling(\n    columns = label,\n    row = label == list(\"Age\"),\n    footnote = \"This is a sample footnote 2.\"\n  ) %&gt;%\n  \n  # Convert to gt table\n  as_gt() %&gt;%\n  \n  # Add table header with title\n  gt::tab_header(\n    title = md(\"**Table 1: Sociodemographic Characteristics of Patients With and Without Diabetes in the Demo Dataset**\")\n  ) %&gt;%\n  \n  # Prevent footnotes from being split across multiple lines\n  tab_options(footnotes.multiline = FALSE) %&gt;%\n  \n  # Right-align all columns except the label column\n  tab_style(\n    style = cell_text(align = \"center\"),\n    locations = cells_column_labels(\n      columns = everything()\n    )\n  ) %&gt;%\n  tab_style(\n    style = cell_text(align = \"right\"),\n    locations = cells_body(\n      columns = !label\n    )\n  ) \n  \n\n# Adding some colors to the tables\ntab %&gt;%\n  tab_style(\n    style = cell_fill(color = \"#E8E4E6\"),  # Apply the background color\n    locations = cells_body(\n      rows = seq(2, nrow(tab$`_data`), by = 2)  # Select every second row (alternating)\n    )\n  ) %&gt;%\n  tab_style(\n    style = cell_fill(color = \"#DAE9F7\"),\n    locations = cells_column_labels()\n  ) %&gt;%\n  tab_style(\n    style = cell_fill(color = \"#DAE9F7\"),\n    locations = cells_column_spanners()\n  )"
  }
]